import json
import math
import logging
import requests

from odoo import http, _, exceptions
from odoo.http import request

from .serializers import Serializer
from .exceptions import QueryFormatError

_logger = logging.getLogger(__name__)

from datetime import datetime, timedelta
from odoo.tests import Form
from odoo.tests.common import SavepointCase
from odoo.exceptions import ValidationError, UserError

def error_response(error, msg):
    return {
        "jsonrpc": "2.0",
        "id": None,
        "error": {
            "code": 200,
            "message": msg,
            "data": {
                "name": str(error),
                "debug": "",
                "message": msg,
                "arguments": list(error.args),
                "exception_type": type(error).__name__
            }
        }
    }


class OdooAPI(http.Controller):
    def update_bom(self, bom_quantities={'bulk': 1.0, 'green_leaf': 1.0}):
        bulk = request.env['product.product'].search([['name', '=', 'Bulk']])
        green_leaf = request.env['product.product'].search([['name', '=', 'Green Leaf']])
        unit = request.env.ref("uom.product_uom_unit").id
        bom_bulk = request.env['mrp.bom'].create({
            'product_tmpl_id': bulk.product_tmpl_id.id,
            'product_qty': bom_quantities['bulk'],
            'product_uom_id': unit,
            'bom_line_ids': [(0, 0, {
                'product_id': green_leaf.id,
                'product_qty': bom_quantities['green_leaf'],
                'product_uom_id': unit
            }
                              ),
                             ]
        })
        request.env.cr.commit()
        return bom_bulk

    def mo_production(self, bom_bulk=None):
        bulk = request.env['product.product'].search([['name', '=', 'Bulk']])
        mo_bulk_form = Form(request.env['mrp.production'])
        mo_bulk_form.product_id = bulk
        mo_bulk_form.bom_id = bom_bulk
        mo_bulk_form.product_qty = bom_bulk.product_qty
        mo_bulk_form.product_uom_id = request.env.ref("uom.product_uom_unit")
        mo_bulk = mo_bulk_form.save()
        mo_bulk.action_confirm()
        mo_bulk.action_assign()
        context = {"active_ids": [mo_bulk.id], "active_id": mo_bulk.id}
        product_form = Form(request.env['mrp.product.produce'].with_context(context))
        product_form.qty_producing = bom_bulk.product_qty
        lot_bulk = request.env['stock.production.lot'].create(
            {'product_id': bulk.id, 'company_id': request.env.company.id})
        product_form.finished_lot_id = lot_bulk
        product_consume = product_form.save()
        product_consume.do_produce()
        mo_bulk.button_mark_done()
        request.env.cr.commit()

    def update_subcontracting(self, vendor, product, quantity):
        picking_form = Form(request.env['stock.picking'])
        picking_form.picking_type_id = request.env.ref('stock.picking_type_in')
        picking_form.partner_id = request.env['res.partner'].search([['name', '=', str(vendor)]])
        with picking_form.move_ids_without_package.new() as move:
            move.product_id = request.env['product.product'].search([['name', '=', str(product)]])
            move.product_uom_qty = quantity
        picking_receipt = picking_form.save()
        picking_receipt.action_confirm()
        wh = picking_receipt.picking_type_id.warehouse_id
        pg1 = request.env['procurement.group'].create({})
        request.env['procurement.group'].run_scheduler()
        picking = request.env['stock.picking'].search([('group_id', '=', pg1.id)])
        picking_receipt.move_lines.quantity_done = quantity
        picking_receipt.button_validate()
        request.env.cr.commit()
        return picking_receipt.id

    @http.route(
        '/auth/',
        type='json', auth='none', methods=["POST"], csrf=False)
    def authenticate(self, *args, **post):
        try:
            login = post["login"]
        except KeyError:
            raise exceptions.AccessDenied(message='`login` is required.')
        try:
            password = post["password"]
        except KeyError:
            raise exceptions.AccessDenied(message='`password` is required.')
        try:
            db = post["db"]
        except KeyError:
            raise exceptions.AccessDenied(message='`db` is required.')
        url_root = request.httprequest.url_root
        AUTH_URL = f"{url_root}web/session/authenticate/"
        headers = {'Content-type': 'application/json'}
        data = {
            "jsonrpc": "2.0",
            "params": {
                "login": login,
                "password": password,
                "db": db
            }
        }
        res = requests.post(
            AUTH_URL,
            data=json.dumps(data),
            headers=headers
        )
        try:
            session_id = res.cookies["session_id"]
            user = json.loads(res.text)
            user["result"]["session_id"] = session_id
        except Exception:
            return "Invalid credentials."
        return user["result"]

    @http.route(
        '/object/<string:model>/<string:function>',
        type='json', auth='user', methods=["POST"], csrf=False)
    def call_model_function(self, model, function, **post):
        args = []
        kwargs = {}
        if "args" in post:
            args = post["args"]
        if "kwargs" in post:
            kwargs = post["kwargs"]
        model = request.env[model]
        result = getattr(model, function)(*args, **kwargs)
        return result

    @http.route(
        '/object/<string:model>/<int:rec_id>/<string:function>',
        type='json', auth='user', methods=["POST"], csrf=False)
    def call_obj_function(self, model, rec_id, function, **post):
        args = []
        kwargs = {}
        if "args" in post:
            args = post["args"]
        if "kwargs" in post:
            kwargs = post["kwargs"]
        obj = request.env[model].browse(rec_id).ensure_one()
        result = getattr(obj, function)(*args, **kwargs)
        return result

    @http.route(
        '/api/<string:model>',
        type='http', auth='user', methods=['GET'], csrf=False)
    def get_model_data(self, model, **params):
        try:
            records = request.env[model].search([])
        except KeyError as e:
            msg = "The model `%s` does not exist." % model
            res = error_response(e, msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        if "query" in params:
            query = params["query"]
        else:
            query = "{*}"
        if "order" in params:
            orders = json.loads(params["order"])
        else:
            orders = ""
        if "filter" in params:
            filters = json.loads(params["filter"])
            records = request.env[model].search(filters, order=orders)
        prev_page = None
        next_page = None
        total_page_number = 1
        current_page = 1
        if "page_size" in params:
            page_size = int(params["page_size"])
            count = len(records)
            total_page_number = math.ceil(count / page_size)
            if "page" in params:
                current_page = int(params["page"])
            else:
                current_page = 1  # Default page Number
            start = page_size * (current_page - 1)
            stop = current_page * page_size
            records = records[start:stop]
            next_page = current_page + 1 \
                if 0 < current_page + 1 <= total_page_number \
                else None
            prev_page = current_page - 1 \
                if 0 < current_page - 1 <= total_page_number \
                else None
        if "limit" in params:
            limit = int(params["limit"])
            records = records[0:limit]
        try:
            serializer = Serializer(records, query, many=True)
            data = serializer.data
        except (SyntaxError, QueryFormatError) as e:
            res = error_response(e, e.msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        res = {
            "count": len(records),
            "prev": prev_page,
            "current": current_page,
            "next": next_page,
            "total_pages": total_page_number,
            "result": data
        }
        return http.Response(
            json.dumps(res),
            status=200,
            mimetype='application/json'
        )

    @http.route(
        '/api/<string:model>/<int:rec_id>',
        type='http', auth='user', methods=['GET'], csrf=False)
    def get_model_rec(self, model, rec_id, **params):
        try:
            records = request.env[model].search([])
        except KeyError as e:
            msg = "The model `%s` does not exist." % model
            res = error_response(e, msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        if "query" in params:
            query = params["query"]
        else:
            query = "{*}"
        # TODO: Handle the error raised by `ensure_one`
        record = records.browse(rec_id).ensure_one()
        try:
            serializer = Serializer(record, query)
            data = serializer.data
        except (SyntaxError, QueryFormatError) as e:
            res = error_response(e, e.msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        return http.Response(
            json.dumps(data),
            status=200,
            mimetype='application/json'
        )

    @http.route(
        '/api/<string:model>/',
        type='json', auth="user", methods=['POST'], csrf=False)
    def post_model_data(self, model, **post):
        try:
            data = post['data']
        except KeyError:
            msg = "`data` parameter is not found on POST request body"
            raise exceptions.ValidationError(msg)
        try:
            model_to_post = request.env[model]
        except KeyError:
            msg = "The model `%s` does not exist." % model
            raise exceptions.ValidationError(msg)
        # TODO: Handle data validation
        if "context" in post:
            context = post["context"]
            record = model_to_post.with_context(**context).create(data)
        else:
            record = model_to_post.create(data)
        return record.id

    # This is for single record update
    @http.route(
        '/api/<string:model>/<int:rec_id>/',
        type='json', auth="user", methods=['PUT'], csrf=False)
    def put_model_record(self, model, rec_id, **post):
        try:
            data = post['data']
        except KeyError:
            msg = "`data` parameter is not found on PUT request body"
            raise exceptions.ValidationError(msg)
        try:
            model_to_put = request.env[model]
        except KeyError:
            msg = "The model `%s` does not exist." % model
            raise exceptions.ValidationError(msg)
        if "context" in post:
            # TODO: Handle error raised by `ensure_one`
            rec = model_to_put.with_context(**post["context"]) \
                .browse(rec_id).ensure_one()
        else:
            rec = model_to_put.browse(rec_id).ensure_one()
        # TODO: Handle data validation
        for field in data:
            if isinstance(data[field], dict):
                operations = []
                for operation in data[field]:
                    if operation == "push":
                        operations.extend(
                            (4, rec_id, _)
                            for rec_id
                            in data[field].get("push")
                        )
                    elif operation == "pop":
                        operations.extend(
                            (3, rec_id, _)
                            for rec_id
                            in data[field].get("pop")
                        )
                    elif operation == "delete":
                        operations.extend(
                            (2, rec_id, _)
                            for rec_id
                            in data[field].get("delete")
                        )
                    else:
                        data[field].pop(operation)  # Invalid operation
                data[field] = operations
            elif isinstance(data[field], list):
                data[field] = [(6, _, data[field])]  # Replace operation
            else:
                pass
        try:
            return rec.write(data)
        except Exception as e:
            # TODO: Return error message(e.msg) on a response
            return False

    # This is for bulk update
    @http.route(
        '/api/<string:model>/',
        type='json', auth="user", methods=['PUT'], csrf=False)
    def put_model_records(self, model, **post):
        try:
            data = post['data']
        except KeyError:
            msg = "`data` parameter is not found on PUT request body"
            raise exceptions.ValidationError(msg)
        try:
            model_to_put = request.env[model]
        except KeyError:
            msg = "The model `%s` does not exist." % model
            raise exceptions.ValidationError(msg)
        # TODO: Handle errors on filter
        filters = post["filter"]
        if "context" in post:
            recs = model_to_put.with_context(**post["context"]) \
                .search(filters)
        else:
            recs = model_to_put.search(filters)
        # TODO: Handle data validation
        for field in data:
            if isinstance(data[field], dict):
                operations = []
                for operation in data[field]:
                    if operation == "push":
                        operations.extend(
                            (4, rec_id, _)
                            for rec_id
                            in data[field].get("push")
                        )
                    elif operation == "pop":
                        operations.extend(
                            (3, rec_id, _)
                            for rec_id
                            in data[field].get("pop")
                        )
                    elif operation == "delete":
                        operations.extend(
                            (2, rec_id, _)
                            for rec_id in
                            data[field].get("delete")
                        )
                    else:
                        pass  # Invalid operation
                data[field] = operations
            elif isinstance(data[field], list):
                data[field] = [(6, _, data[field])]  # Replace operation
            else:
                pass
        if recs.exists():
            try:
                return recs.write(data)
            except Exception as e:
                # TODO: Return error message(e.msg) on a response
                return False
        else:
            # No records to update
            return True

    # This is for deleting one record
    @http.route(
        '/api/<string:model>/<int:rec_id>/',
        type='http', auth="user", methods=['DELETE'], csrf=False)
    def delete_model_record(self, model, rec_id, **post):
        try:
            model_to_del_rec = request.env[model]
        except KeyError as e:
            msg = "The model `%s` does not exist." % model
            res = error_response(e, msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        # TODO: Handle error raised by `ensure_one`
        rec = model_to_del_rec.browse(rec_id).ensure_one()
        try:
            is_deleted = rec.unlink()
            res = {
                "result": is_deleted
            }
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        except Exception as e:
            res = error_response(e, str(e))
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )

    # This is for bulk deletion
    @http.route(
        '/api/<string:model>/',
        type='http', auth="user", methods=['DELETE'], csrf=False)
    def delete_model_records(self, model, **post):
        filters = json.loads(post["filter"])
        try:
            model_to_del_rec = request.env[model]
        except KeyError as e:
            msg = "The model `%s` does not exist." % model
            res = error_response(e, msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        # TODO: Handle error raised by `filters`
        recs = model_to_del_rec.search(filters)
        try:
            is_deleted = recs.unlink()
            res = {
                "result": is_deleted
            }
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        except Exception as e:
            res = error_response(e, str(e))
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )

    @http.route(
        '/api/<string:model>/<int:rec_id>/<string:field>',
        type='http', auth="user", methods=['GET'], csrf=False)
    def get_binary_record(self, model, rec_id, field, **post):
        try:
            request.env[model]
        except KeyError as e:
            msg = "The model `%s` does not exist." % model
            res = error_response(e, msg)
            return http.Response(
                json.dumps(res),
                status=200,
                mimetype='application/json'
            )
        rec = request.env[model].browse(rec_id).ensure_one()
        if rec.exists():
            src = getattr(rec, field).decode("utf-8")
        else:
            src = False
        return http.Response(
            src
        )

    @http.route('/get_mos',type='json', auth="user")
    def get_mos(self):
        mo_recs = request.env['mrp.production'].search([])
        ids = []
        for rec in mo_recs:
            vals = {
                'id': rec.id
            }
            ids.append(vals)
        data = {'status' : 200, 'response':ids, 'message':'Success'}
        return data
    @http.route('/create_mo', type='json', auth='user')
    def create_mo(self, **rec):
        if request.jsonrequest:
            print("rec", rec)
            print(rec['green_leaf'])
            if rec['green_leaf']:
                bom_bulk = self.update_bom(bom_quantities={'bulk': rec['bulk'], 'green_leaf': rec['green_leaf']})
                self.mo_production(bom_bulk)
                args = {'success' : True, 'message':'Success'}
        return args

    @http.route('/create_picking', type='json', auth='user')
    def create_picking(self, **rec):
        if request.jsonrequest:
            if rec['quantity']:
                picking_id = self.update_subcontracting(rec['vendor'], rec['product'], rec['quantity'])
                if picking_id:
                    args = {'success' : True, 'message':'Success'}
                else:
                    args = {'success':False}
        return args

'''
localhost:8069/web/session/authenticate/
{
    "params": {
        "login": "admin@admin.com",
        "password": "Logitech@1",
        "db": "kste_db"
    }
}

{
    "jsonrpc" : "2.0",
    "params" : {
        "green_leaf" : 1.0,
        "bulk" : 1.0
    }
}

{
    "jsonrpc" : "2.0",
    "params" : {
        "vendor" : "Demo STG1",
        "product" : "Green Leaf",
        "quantity" : 10,
    }
}
'''